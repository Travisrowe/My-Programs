1011 0011 0000 0001				;mov	bl,1 		100H
90 90							;Nop (x2)			102H
E9 01 00						;JMP 1 byte	Hex		104H
06								;Input		Hex		107H
1000 1010 0000 1110 07 01		;mov	cl,input	108H

1000 1000 1100 1000				;mov	al,cl	Rpt: 115H
1000 1000 1101 1010				;mov	dl,bl
1011 0100 0000 0000				;mov	ah,0
1111 0110 1111 0010				;div	dl	
0010 1000 1100 0010				;sub	dl,al
1000 0000 1111 1010 0000 0001	;cmp	dl,1
0111 1110 0001 0000				;JLE 10H bytes

1000 1000 1100 1000				;mov	al,cl
1011 0100 0000 0000				;mov	ah,0
1111 0110 1111 0011				;div	bl	
0000 0000 1101 1000				;add	al,bl
1011 0010 0000 0010 			;mov	dl,2
1111 0110 1111 0010				;div	dl
1000 1000 1100 0011				;mov	bl,al
1110 1001 1110 0100	0000 0000			;JMP to RPT			1CH bytes

								;sqrt is in BX

B3 01	 	;100H
90 90		;102H
E9 01 00 	;104H
06 			;107H 
8A 0E 07 01	;108H

88 C8		;10CH
88 DA		;10EH	AL = 06
					BL = 01
					CL = 06
					DL = 01
B4 00				AX = 06	
F6 F2		;110H   BROKE
28 C2		;112H
80 FA 01	;114H
7E 0F		;117H

88 C8		;119H
B4 00
F6 F3		;11BH
00 D8		;11DH
B2 02		;11FH
F6 F2		;122H	

88 C3
E9 E4 00		;124H, 125H
90

		mov		bl,1		; r = 1
		JMP		1 byte
					;input (107H)
		mov		cl,al		;store input in cx for safe-keeping

Rpt:	mov		al,cl		;store input in ax for alteration
		mov		dl,bl		;move r into dx for comparison
		mov		ah,0
		div		dl			;x/r (stored in ax)
		sub		dl,al		;r - x/r
		cmp		dl,1		;while(r-x/r > 1) {
		JLE		End

		mov		al,cl		;store input in ax for division
		mov		ah,0
		div		bl			;x/r (stored in ax)
		add		al,bl		;r + x/r (stored in ax)
		div		2			;(r + x/r) / 2 (stored in ax)

		mov		bl,al		
		JMP		Rpt			;	}
		


End:
BB 01 00 90 E9 01 00 06 8B 0E 07 01 89 C8 89 DA F7 F2 29 C2 81 FA 01 00 7F 0E 89 C8 F7 F3 01 D8 BA 02     F7 F2 89 C3 E9 E3 00
																		7E 10						  00				 E2